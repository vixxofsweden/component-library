'use strict';

var NEEDS_QUOTE = /[\s\\*\?\[\]`$()#<>|&;]/;
var arrayFrom = require("array-from");
var repeat = require("repeat-string");

function joinNix(arr) {
  var out = void 0;
  out = arr.map(function (command) {
    // convert to string
    command = String(command);
    // whether we need a quote for the current block
    var needsQuote = false;
    // collection of quoted strings and escaped single quotes
    var blocks = [];
    // string collector
    var currentBlock = [];
    var flushCurrentBlock = function () {
      // skip if we don't have anything collected as the current block
      if (!currentBlock.length) {
        return;
      }
      if (needsQuote) {
        currentBlock.unshift("'");
        currentBlock.push("'");
      }
      blocks.push(currentBlock.join(''));
      currentBlock = [];
    };
    command.split('').forEach(function (char) {
      if (char === "'") {
        // if single quote
        // flush the current block
        flushCurrentBlock();
        // escape a single quote
        blocks.push("\\'");
        return;
      }
      if (NEEDS_QUOTE.test(char)) {
        needsQuote = true;
      }
      currentBlock.push(char);
    });
    // flush last block
    flushCurrentBlock();
    var escapedCommand = blocks.join('');
    return escapedCommand;
  });
  return out.join(' ');
}

function joinWin(arr) {
  var out = void 0;

  out = arr.map(function (command) {
    if (!/[\s\\"<>|&]/.test(command)) {
      return command;
    }
    var backslashes = 0;
    var c = void 0;
    // start escape quote
    var outString = ["\""];
    var flushBackslashes = function (n) {
      outString.push(repeat("\\", n * backslashes));
      backslashes = 0;
    };
    command.split('').forEach(function (char) {
      // if char is a backslash
      if (char === "\\") {
        // enqueue backslash
        backslashes++;
      }
      // if char is a double quote
      else if (char === "\"") {
          // doubly end backslash sequence if any
          flushBackslashes(2);
          // push string \" to escape quote
          outString.push("\\\"");
        } else {
          // singly end backslash sequence if any
          flushBackslashes(1);
          outString.push(char);
        }
    });
    // flush any remaining backslashes
    flushBackslashes(2);
    // end escape quote
    outString.push("\"");
    var escapedCommand = outString.join('');
    // escape some special characters
    escapedCommand = escapedCommand.replace(/[&|<>;%^]/g, function (match) {
      return "^" + match;
    });
    return escapedCommand;
  });

  return out.join(' ');
}

function commandJoin(arg) {
  if (typeof arg === 'string') {
    arg = [arg];
  }
  arg = arrayFrom(arg);
  if (process.platform === 'win32') {
    return joinWin(arg);
  } else {
    return joinNix(arg);
  }
}

module.exports = commandJoin;