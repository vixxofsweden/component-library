{{#markdown}}
# Inputs
This component covers all types of text and numeric inputs, textareas and select boxes.<br>
For Radio and Checkboxes see the [Radio & Checkbox](http://styleguide/sgdoc/docs/sg-component-radiocheck) component.<br>
For Date and Time inputs see the [Date](http://styleguide/sgdoc/docs/sg-component-datepicker) component.


### Behaviour across browsers
Behaviour of some inputs is markedly different across browsers and devices. This is intentional, the behaviour common to a set of one device's users is often the preferred behaviour. Overriding these defaults may make the interface harder to use.


### Markup and accessibility
Guidance on how to use correct markup for semantic and accessible forms will be available in the proposed *Forms* component.


### Attributes
The following attributes must be carefully used in the correct way depending on the intention and value of your input. 

- **placeholder:** in field hints on how the input should be filled. It disappears once focused or text is entered. Placeholder hints should never be label content or critical content. *Note:* The [Webshim](http://afarkas.github.io/webshim/demos/) polyfill library will automatically enable placeholder text in IE8 & 9.
- **autocomplete:** `[on|off|name|address|email|etc..]` the autocomplete attribute should contain an approved string to match similar fields that the browser can use for pre-population of common content. It is *STRONGLY RECOMENDED* to allow browsers to complete *ALL* fields (except a Credit Card CCV number). Autocomplete can contain more than one word and matches any that apply. <sup>[Reference](https://html.spec.whatwg.org/multipage/forms.html#autofilling-form-controls:-the-autocomplete-attribute)</sup>
- **name** while commonly used to group elements, the name attribute has strong ties to the autocomplete value, it is strongly recommended that the name attribute matches the autocomplete value where possible.
- **spellcheck:** `[true|false]` tells the browser if the content should be marked for spellchecking the browser determines what this means, but basically it should be set to *true* for normal language input and *false* for non English text like names or codes. (works in IE10+)
- **autocorrect:** `[none|sentences|words|characters|off|on]` an iOS only attribute that automatically corrects some spelling errors. This should be used as needed for text based inputs <sup>[Reference](https://developer.apple.com/library/safari/documentation/AppleApplications/Reference/SafariHTMLRef/Articles/Attributes.html)</sup>
- **autocapitalize:** `[none|sentences|words|characters|off|on]` an iOS only attribute that automatically capitalizes letters as indicated. 
- **inputmode:** `[verbatim|latin|latin-name|latin-prose|numeric|etc..]` specifies the kind of input mechanism that would be most helpful for users entering content. <sup>[Reference](https://html.spec.whatwg.org/multipage/forms.html#input-modalities:-the-inputmode-attribute)</sup>

### Validation
The following attributes indicate the valid and invalid states of an input. This component does not manage or control functionality or styling of client-side validation. (See the [Validation](http://styleguide/sgdoc/docs/sg-component-validation) component for that). If implemented by themselves these attributes will trigger HTML5 validation via the browsers on form submission (This can be disabled by adding the `novalidate` attribute in the form tag).

- **required:** any field that is marked required is invalid if it does not contain a value. Select inputs can have an invalid state if the option selected does not have a value. This is the correct way of marking up required fields.
- **maxlength/minlength:** the maximum and minimum valid number of characters allowed in the input. `maxlength` with both validate AND prevent the the number of characters allowed. `minlength` will only validate and is supported by very few browsers (Chrome 40+). <sup>[Reference](https://html.spec.whatwg.org/multipage/forms.html#the-maxlength-and-minlength-attributes)</sup>
- **pattern:** A regex pattern to match to. By far the most powerful validation tool. Be careful not to restrict entry too much. Users should be able to enter values in any format they like.
- **min/max:** the valid range of a numeric input (including these values) <sup>[Reference](https://html.spec.whatwg.org/multipage/forms.html#the-min-and-max-attributes)</sup>
- **step:** The valid increment value starting with the `min` value. <sup>[Reference](http://www.w3.org/TR/2011/WD-html5-20110525/common-input-element-attributes.html#the-step-attribute)</sup>

<h3 id="webshimSettings">Webshim</h3>
[Webshim](http://afarkas.github.io/webshim/demos/) is a JavaScript polyfill library which enables modern features in unsupported browsers. 

1. Enables the `placeholder` attribute in unsupported browsers (<IE10)
2. Enabled more user friendly `type="number"` fields on unsupported browsers (IE)

You must manually include Webshim in your project ([via Bower](https://github.com/aFarkas/webshim)) and run the following initialize script:
``` JavaScript
webshims.setOptions( 'forms-ext', {
        replaceUI: false,
        types: "number",
        'forms-ext': {
            widgets: { calculateWidth: false  }
        }
});
webshims.activeLang('en-AU');
webshims.polyfill('forms forms-ext');
```

**Note:** If you use Webshim for multiple components you need to combine the settings, initialise and run only once.

## Sizing inputs
By default inputs and text areas are block elements that fill 100% of the width available to them. The sizing utility classes (eg. `.sg-u-widthSmall`, `.sg-u-widthlarger`) can be used to restrict their maximum width.
{{/markdown}}